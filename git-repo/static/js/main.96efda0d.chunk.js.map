{"version":3,"sources":["component/gituser.js","component/login.js","App.js","serviceWorker.js","index.js"],"names":["GitUser","props","useState","resultLoaded","useEffect","className","repo","map","item","index","key","id","href","html_url","target","name","dateValue","date","Date","getFullYear","toLocaleString","month","genarateDate","created_at","description","LoginUser","state","username","email","changeValue","bind","submitLogin","e","value","this","setState","preventDefault","disabled","userError","onSubmit","type","placeholder","onChange","Component","App","isLogged","login","setRepo","setError","axios","get","then","result","console","log","data","length","sort","a","b","adate","bdate","getTime","catch","err","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.96efda0d.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\n\r\nfunction GitUser(props) {\r\n  const [resultLoaded, setLoader] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // if (!resultLoaded) {\r\n    //   setLoader(true);\r\n    // }\r\n  }, [resultLoaded]);\r\n  const genarateDate = dateValue => {\r\n    var date = new Date(dateValue);\r\n    return (\r\n      <span className=\"time\">\r\n        {date.getFullYear()} -{\" \"}\r\n        {date.toLocaleString(\"default\", { month: \"long\" })}\r\n      </span>\r\n    );\r\n  };\r\n  return (\r\n    <div>\r\n      <ul className=\"timeline\">\r\n        {props.repo.map((item, index) => (\r\n          <li key={item.id}>\r\n            <div\r\n              className={`${\r\n                index === 0 || index % 2 === 0 ? \"direction-r\" : \"direction-l\"\r\n              }`}\r\n            >\r\n              <div className=\"flag-wrapper\">\r\n                <span className=\"flag\">\r\n                  <a href={item.html_url} target=\"_blank\">\r\n                    {item.name}\r\n                  </a>\r\n                </span>\r\n                <span className=\"time-wrapper\">\r\n                  {genarateDate(item.created_at)}\r\n                </span>\r\n              </div>\r\n              <div className=\"desc\">{item.description}</div>\r\n            </div>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default GitUser;\r\n","// import React, { useEffect, useState } from \"react\";\r\n\r\n// function LoginUser(props) {\r\n//   return (\r\n//     <div className=\"login-page\">\r\n//       <div className=\"form\">\r\n//         <form className=\"login-form\">\r\n//           <h3>Provide username and email to view repositories</h3>\r\n//           <input type=\"text\" placeholder=\"username\" />\r\n//           <input type=\"text\" placeholder=\"email\" />\r\n//           <button>Submit</button>\r\n//         </form>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default LoginUser;\r\nimport React, { Component } from \"react\";\r\n\r\nclass LoginUser extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      username: \"\",\r\n      email: \"\"\r\n    };\r\n    this.changeValue = this.changeValue.bind(this);\r\n    this.submitLogin = this.submitLogin.bind(this);\r\n  }\r\n  changeValue(e) {\r\n    let name = e.target.name;\r\n    let value = e.target.value;\r\n    this.setState({\r\n      [name]: value\r\n    });\r\n  }\r\n  submitLogin(e) {\r\n    e.preventDefault();\r\n    this.props.submitLogin(this.state.username, this.state.email);\r\n  }\r\n  render() {\r\n    let disabled = this.state.name === \"\";\r\n    let userError = this.props.userError;\r\n    return (\r\n      <div className=\"login-page\">\r\n        <div className=\"form\">\r\n          <form className=\"login-form\" onSubmit={this.submitLogin}>\r\n            <h3>Provide username to view repositories</h3>\r\n            {userError !== \"\" ? (\r\n              <span className=\"error\">{this.props.userError}</span>\r\n            ) : (\r\n              \"\"\r\n            )}\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"username\"\r\n              name=\"username\"\r\n              value={this.state.name}\r\n              onChange={this.changeValue}\r\n            />\r\n            {/* <input\r\n              type=\"text\"\r\n              placeholder=\"email\"\r\n              name=\"email\"\r\n              value={this.state.email}\r\n              onChange={this.changeValue}\r\n            /> */}\r\n            <button disabled={disabled}>Submit</button>\r\n          </form>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginUser;\r\n","import React, { useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport GitUser from \"./component/gituser\";\r\nimport LoginUser from \"./component/login\";\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  const [isLogged, login] = useState(false);\r\n  const [repo, setRepo] = useState([]);\r\n  const [userError, setError] = useState(\"\");\r\n\r\n  const setUser = (username, email) => {\r\n    axios\r\n      .get(`https://api.github.com/users/${username}/repos`)\r\n      .then(result => {\r\n        console.log(\"ree\", result);\r\n        let resultData = result.data;\r\n        if (resultData.length > 0) {\r\n          let data = result.data.sort((a, b) => {\r\n            var adate = new Date(a.created_at);\r\n            var bdate = new Date(b.created_at);\r\n\r\n            return adate.getTime() - bdate.getTime();\r\n          });\r\n\r\n          setRepo(data);\r\n          login(true);\r\n        } else {\r\n          setError(\"Check username no result found\");\r\n        }\r\n      })\r\n      .catch(err => {\r\n        setError(\"Check username no result found\");\r\n      });\r\n  };\r\n  return (\r\n    <div className=\"App\">\r\n      <h1 className=\"text-center\">Github Timeline</h1>\r\n      {!isLogged ? (\r\n        <LoginUser submitLogin={setUser} userError={userError} />\r\n      ) : (\r\n        <GitUser repo={repo} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}